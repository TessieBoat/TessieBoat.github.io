<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tessieboat.github.io</id>
    <title>TessieBoat</title>
    <updated>2021-04-03T13:27:06.519Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tessieboat.github.io"/>
    <link rel="self" href="https://tessieboat.github.io/atom.xml"/>
    <subtitle>享受学习的快乐</subtitle>
    <logo>https://tessieboat.github.io/images/avatar.png</logo>
    <icon>https://tessieboat.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, TessieBoat</rights>
    <entry>
        <title type="html"><![CDATA[关于VPN/翻墙的新手教程]]></title>
        <id>https://tessieboat.github.io/post/guan-yu-vpnfan-qiang-de-xiang-xi-jiao-cheng/</id>
        <link href="https://tessieboat.github.io/post/guan-yu-vpnfan-qiang-de-xiang-xi-jiao-cheng/">
        </link>
        <updated>2021-04-03T07:51:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1简介">1.简介</h3>
<p>出于某些目的，中国在大陆的互联网中设置了防火墙，用域名解析服务缓存污染、TCP连接重置等方式，过滤一些“非法”的网站。<br>
本教程将教会你使用<strong>简单的</strong>科学上网方式，以便备用。</p>
<h3 id="2确认系统">2.确认系统</h3>
<p>对于电脑，存在Windows系统，macOS系统和linux系统。<br>
对于手机，苹果的是iOS系统，<strong>不是苹果的统统是安卓系统</strong>。</p>
<p>需要注意，手机中<strong>鸿蒙OS是安卓系统</strong>，UOS是linux系统。</p>
<h3 id="3下载安装">3.下载安装</h3>
<h4 id="1-windows系统">(1) windows系统</h4>
<p><strong>SSR</strong></p>
<p>ssr下载链接：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases/download/4.7.0/ShadowsocksR-4.7.0-win.7z">下载</a></p>
<p>下载完成后解压，相关节点会在<a href="https://github.com/Alvin9999/new-pac/wiki/ss%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7">这里</a>更新。</p>
<figure data-type="image" tabindex="1"><img src="https://ftp.bmp.ovh/imgs/2021/04/d2a242aba9367037.png" alt="" loading="lazy"></figure>
<p>上图是导入SSR链接的方法，当然你也可以手动输入。</p>
<p><strong>V2ray</strong>（⭐推荐⭐）</p>
<p>V2ray下载链接：<a href="https://github.com/2dust/v2rayN/releases/download/4.13/v2rayN.zip">下载</a></p>
<p>下载完成后解压，相关节点会在<a href="https://github.com/Alvin9999/new-pac/wiki/v2ray%E5%85%8D%E8%B4%B9%E8%B4%A6%E5%8F%B7">这里</a>更新。</p>
<figure data-type="image" tabindex="2"><img src="https://ftp.bmp.ovh/imgs/2021/04/f83d20b335695229.png" alt="" loading="lazy"></figure>
<p>上图是导入V2ray链接的方法，当然你也可以手动输入。</p>
<p><strong>注意事项</strong></p>
<p>请注意设置你的代理设置，一般选择全局代理。</p>
<h4 id="2安卓系统">(2)安卓系统</h4>
<p><strong>SSR</strong></p>
<p>ssr下载链接：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases/download/3.4.0.8/shadowsocksr-release.apk">下载</a></p>
<p>链接在粘贴板自动导入。</p>
<p><strong>V2ray</strong></p>
<p>V2ray下载链接：<a href="http://d1.bdrive.tk/v2ray.vpn-universal-release.apk">下载1</a> <a href="http://d1.bdrive.tk/v2ray.vpn-universal-release.apk">下载2</a></p>
<p>下载后里面内置了节点，基本够用了。</p>
<h4 id="3-ios系统">(3) iOS系统</h4>
<p><strong>Shadowrocket</strong>（⭐推荐⭐）</p>
<p>Shadowrocket下载链接：<a href="https://github.com/aloneliu/Shadowrocket---iOS-ipa/blob/master/ssr-2.1.11.ipa">下载</a></p>
<p>下载之后，在电脑上安装<a href="https://url.i4.cn/faIfqyaa">爱思助手</a>，然后安装上Shadowrocket就可以使用了，和ssr几乎相同。</p>
<p><strong>Fair VPN</strong></p>
<p>先在App Store上安装<a href="https://apps.apple.com/us/app/testflight/id899247664">TestFlight</a>，然后安装<a href="https://testflight.apple.com/join/fWkpjVXZ">FairVPN</a></p>
<p>注意，通过TestFlight安装的测试版软件最长为90天期限，到期后要打开TestFlight重新下载，下载链接不变。</p>
<h3 id="4安全警告">4.安全警告</h3>
<p>软件都是采用加密方式的，但为了更稳定、更安全的翻墙，建议<strong>卸载国产杀毒软件</strong>，至少翻墙时不要用它们！因为很多国产杀毒软件，比如360安全卫生、360杀毒软件、腾讯管家、金山卫士等不仅仅会起<strong>干扰作用</strong>，造成软件无法正常使用或速度变慢，也可能<strong>导致无法访问上述网站</strong>，请熟悉！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[非均匀有理B样条学习笔记]]></title>
        <id>https://tessieboat.github.io/post/fei-jun-yun-you-li-b-yang-tiao-xue-xi-bi-ji/</id>
        <link href="https://tessieboat.github.io/post/fei-jun-yun-you-li-b-yang-tiao-xue-xi-bi-ji/">
        </link>
        <updated>2020-01-19T09:50:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-引入">1. 引入</h3>
<p>如果你还没有看过<strong>回形针paperclip</strong>的<strong>如何设计一个逼真的三维模型</strong>，可以在观看后再看此博客。</p>
<p>当我看完这个视频的时候，我整个人都是蒙的，正如这条评论</p>
<figure data-type="image" tabindex="1"><a href="https://imgchr.com/i/1CwshV"><img src="https://s2.ax1x.com/2020/01/19/1CwshV.md.png" alt="1CwshV.md.png" loading="lazy"></a></figure>
<p>在以下的讲解中，会从函数过渡到图像的步骤开始开始</p>
<h3 id="2-从函数到多项式">2. 从函数到多项式</h3>
<p>正如回形针所说，计算机不具有人类一样徒手画线的能力，为了画出一条曲线，计算机需要一个函数来画出一个曲线。</p>
<figure data-type="image" tabindex="2"><a href="https://imgchr.com/i/1C0dgO"><img src="https://s2.ax1x.com/2020/01/19/1C0dgO.md.png" alt="1C0dgO.md.png" loading="lazy"></a></figure>
<p>从小学到高中我们学了很多函数图像，将这些图像伸缩，平移，就可以<strong>基本满足</strong>曲线的要求。</p>
<p>而回形针的方式，是将普通f(x)的函数转变为参数函数。如以下这个函数<strong>y=0.5x</strong></p>
<figure data-type="image" tabindex="3"><a href="https://imgchr.com/i/1ChFJg"><img src="https://s2.ax1x.com/2020/01/19/1ChFJg.md.png" alt="1ChFJg.md.png" loading="lazy"></a></figure>
<p>如果你看到回形针的P(t)=(x(t),y(t)),你可以把它理解为，在这个函数上的任意一个P点，满足一个x坐标和y坐标的关系。如果将上图中函数的P点的y坐标记作t，那么P的坐标就为P(2t,t)，那么就可以表示为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace width="-25.607480314960632em"/><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> P(t)=(x(t),y(t))</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mspace width="-4.2679133858267715em"/><mtext> x(t)=2t</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mspace width="-4.2679133858267715em"/><mtext>y(t)=t</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\hspace{-9cm} \left\{\begin{matrix}
\ \text{P(t)=(x(t),y(t))}\\
\ \hspace{-1.5cm} \text{ x(t)=2t}\\
\ \hspace{-1.5cm} \text{y(t)=t}
\end{matrix}\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mspace" style="margin-right:-25.607480314960632em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace"> </span><span class="mord text"><span class="mord">P(t)=(x(t),y(t))</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace"> </span><span class="mspace" style="margin-right:-4.2679133858267715em;"></span><span class="mord text"><span class="mord"> x(t)=2t</span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mspace"> </span><span class="mspace" style="margin-right:-4.2679133858267715em;"></span><span class="mord text"><span class="mord">y(t)=t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>讲完了参数函数，我们过渡到回形针这个片段。</p>
<figure data-type="image" tabindex="4"><a href=""><img src="https://pic2.zhimg.com/v2-0a0b262dab2bfd8155139b8c63f3f215_b.webp" alt="v2-0a0b262dab2bfd8155139b8c63f3f215_b.webp" loading="lazy"></a></figure>
<p>现在，便不难理解这里的P(t)函数，P(1)，P(2)都包含了x,y,z轴的坐标，所以最后的P(t)也将是一个以P1为起点，P2为终点的直线。</p>
<h3 id="3-贝塞尔曲线">3. 贝塞尔曲线</h3>
<p>贝塞尔曲线，就是一种可自定义的参数函数。它可以在PS中用钢笔工具画出。</p>
<figure data-type="image" tabindex="5"><a href=""><img src="https://pic3.zhimg.com/v2-f7a45a6c482e7cfa6b307f22efebb232_b.webp" alt="v2-f7a45a6c482e7cfa6b307f22efebb232_b.webp" loading="lazy"></a></figure>
<p>这就是贝塞尔曲线，如果我们找到ABC三个点，想绘制出以A为起点，C为终点，B为控制点的曲线，那么，我们可以在 AB 线段上任选一个点 D，根据 AD 和 AB 的比值，在 BC 线段上找到一个点 E，让 AD:AB=BE:BC 。再连接 DE ，在 DE 线段上找出点 F，让 DF:DE = AD:AB = BE:BC，如图所示：</p>
<figure data-type="image" tabindex="6"><a href=""><img src="https://pic2.zhimg.com/v2-f9baf203bf3f680787086d75ed353fd5_b.webp" alt="v2-f9baf203bf3f680787086d75ed353fd5_b.webp" loading="lazy"></a></figure>
<p>让这个F点从A运动到C，就是我们需要的二次贝塞尔曲线。</p>
<figure data-type="image" tabindex="7"><a href=""><img src="https://pic1.zhimg.com/v2-65b516c77eb117c06e80c15d4abef2d8_b.webp" alt="v2-65b516c77eb117c06e80c15d4abef2d8_b.webp" loading="lazy"></a></figure>
<p>而控制点越多，就可以画出三次，四次，多次的贝塞尔曲线。</p>
<figure data-type="image" tabindex="8"><a href=""><img src="https://pic2.zhimg.com/v2-d1f3f71ed2ae6a1d9276fff8ab970909_b.webp" alt="v2-d1f3f71ed2ae6a1d9276fff8ab970909_b.webp" loading="lazy"></a></figure>
<p>而贝塞尔曲线是如何实现的？这些比例关系如何作用在直角坐标系上？这时候，我们就需要了解贝塞尔曲线的参数函数。</p>
<figure data-type="image" tabindex="9"><a href="https://imgchr.com/i/1C7o1U"><img src="https://s2.ax1x.com/2020/01/19/1C7o1U.md.png" alt="1C7o1U.md.png" loading="lazy"></a></figure>
<p>这就是贝塞尔曲线的参数函数，通过一个基函数B(t)控制了对应的每一个t，Pi对于整个图像P(t)的影响力。<strong>如果我们需要一个P(t)的坐标，就是B(t,i)与每个P点的坐标相乘的乘积的总和</strong>，如下图所示：</p>
<figure data-type="image" tabindex="10"><a href="https://imgchr.com/i/1CbRJ0"><img src="https://s2.ax1x.com/2020/01/19/1CbRJ0.md.png" alt="1CbRJ0.md.png" loading="lazy"></a></figure>
<p>以回形针举的例子，三次贝塞尔曲线为例，我们可以看到B(t)对于编号1,2,3,4四个点的对应函数图像。</p>
<figure data-type="image" tabindex="11"><a href="https://imgchr.com/i/1CbP2T"><img src="https://s2.ax1x.com/2020/01/19/1CbP2T.md.png" alt="1CbP2T.md.png" loading="lazy"></a></figure>
<p>我们可以很明显的发现，当t=0时，P(0)在P0上，当t=1时，P(1)在P3上。而当t在0到1的范围中间的时候，P就构成了这个曲线。</p>
<p>当我们更改任何一个点，都可以会改变这个曲线。而且我们没法控制每个点的权重。于是，在贝塞尔曲线的基础上，出现了均匀有理B样条。</p>
<h3 id="4-均匀b样条">4. 均匀B样条</h3>
<p>这是B样条曲线和贝塞尔曲线的参数函数。</p>
<figure data-type="image" tabindex="12"><a href="https://imgchr.com/i/1CvJeS"><img src="https://s2.ax1x.com/2020/01/19/1CvJeS.md.png" alt="1CvJeS.md.png" loading="lazy"></a></figure>
<p>可以看到除了定义域和基函数，其他的都是一样的。</p>
<figure data-type="image" tabindex="13"><a href="https://imgchr.com/i/1CxEpn"><img src="https://s2.ax1x.com/2020/01/19/1CxEpn.md.png" alt="1CxEpn.md.png" loading="lazy"></a></figure>
<p>这是B样条基函数的展开式。其中，大T中的t1,t2,t3……都是自己设定的数值，用于设定局部控制，k是需要的次数，n是节点个数。</p>
<p>以4个节点的三次B样条为例，我们需要设定t0到t7一共8个值，我们假定它们为均匀的0 1 2 3 4 5 6 7。发现当我们需要计算三次的Ni,3(t)就需要计算Ni,2(t)。</p>
<figure data-type="image" tabindex="14"><a href="https://imgchr.com/i/1PSIO0"><img src="https://s2.ax1x.com/2020/01/19/1PSIO0.md.png" alt="1PSIO0.md.png" loading="lazy"></a></figure>
<p>反复到最后，直至k=0，我们才能计算出Ni,0(t)，然后再计算出Ni,1(t)，最后算出Ni,3(t)。</p>
<p>这样，我们就从0次到3次，最终得到了这个基函数的图像。</p>
<figure data-type="image" tabindex="15"><a href="https://imgchr.com/i/1PCJe0"><img src="https://s2.ax1x.com/2020/01/19/1PCJe0.md.png" alt="1PCJe0.md.png" loading="lazy"></a></figure>
<p>注意，这里灰色的部分并于不能算出，仅仅用于简便计算。灰色的部分不会出现在对应k次的基函数中。</p>
<p>由于我们的例子从t0到t7，间隔都是均匀的，所以叫做均匀B样条。</p>
<h3 id="5-非均匀b样条">5. 非均匀B样条</h3>
<p>如果这个大T中的小t值的间距不同，就是非均匀B样条。</p>
<figure data-type="image" tabindex="16"><a href="https://imgchr.com/i/1PChSH"><img src="https://s2.ax1x.com/2020/01/19/1PChSH.md.png" alt="1PChSH.md.png" loading="lazy"></a></figure>
<p>这样，可以控制每个控制点能够影响的范围。</p>
<h3 id="6-非均匀有理b样条">6. 非均匀有理B样条</h3>
<p>而有理，就是说可以控制每一个节点的权重，更好，更完全地控制曲线。</p>
<figure data-type="image" tabindex="17"><a href="https://imgchr.com/i/1PPG1H"><img src="https://s2.ax1x.com/2020/01/19/1PPG1H.md.png" alt="1PPG1H.md.png" loading="lazy"></a></figure>
<p>这就是非均匀有理B样条，英文缩写NURBS。</p>
<h3 id="7-建模实战">7. 建模实战</h3>
<p>正像这期视频的开头，画一条曲线，画很多条曲线，让曲线连接，旋转，平移，就构成了一个曲线的三维模型。</p>
<figure data-type="image" tabindex="18"><a href="https://imgchr.com/i/1Pim8g"><img src="https://s2.ax1x.com/2020/01/19/1Pim8g.md.png" alt="1Pim8g.md.png" loading="lazy"></a></figure>
<p>这是我的观后作业，希望你喜欢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线段树学习笔记]]></title>
        <id>https://tessieboat.github.io/post/xian-duan-shu-xue-xi-bi-ji/</id>
        <link href="https://tessieboat.github.io/post/xian-duan-shu-xue-xi-bi-ji/">
        </link>
        <updated>2019-11-11T08:13:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-原理">1. 原理</h3>
<p>线段树是啥呢？</p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2019/11/12/M14rgU.jpg" alt="M14rgU.jpg" loading="lazy"></figure>
<p>如图，就是一个数组的线段树。<s>所以，线段树的前提是要有一个原数组。</s></p>
<p>假如，我想让你求数组中的区间和。那么肯定就有巨佬出现了：</p>
<figure data-type="image" tabindex="2"><img src="https://s2.ax1x.com/2019/11/12/M3CBwR.png" alt="M3CBwR.png" loading="lazy"></figure>
<p>呃……（空气安静3秒钟）</p>
<p>好吧，我们求区间最大值。<s>这样，就能让这位巨佬哑口无言。</s></p>
<p>我们把数组分成多个段，就像上面的图，1-n 可以分为 1 - n/2 和 n/2+1 - n两个区域，然后又可以分为四个区域……所以呢，这是一个二叉树。只要我们最后分下去的区间已经分不下去了，只剩一个点了，那么就可以结束了。</p>
<figure data-type="image" tabindex="3"><img src="https://s2.ax1x.com/2019/11/12/M17dpt.png" alt="M17dpt.png" loading="lazy"></figure>
<p>如图，就是一个对于a数组的线段树。同一个颜色的是同一层。因为我们肯定没有2.5这种东西，所以我们需要取整，导致看起来不对称。</p>
<h3 id="2-建树">2. 建树</h3>
<p>我们需要很多变量，我们慢慢来。</p>
<p>首先，我们先说明，每个节点的左儿子编号为2n，右儿子为2n+1。</p>
<p>以下，是我们需要的数组</p>
<pre><code class="language-cpp">int zhi[10001];//原数组 
int fak[10001];//线段树数组 
int qu_l[10001];//维护的区间 左范围 
int qu_r[10001];//维护的区间 右范围 
</code></pre>
<p>原数组的输入我就不讲了，<strong>如果你真的不知道</strong>，我建议你看这个：<a href="https://www.bilibili.com/bangumi/media/md140632/?from=search&amp;seid=10835973984877149679">传送门</a></p>
<pre><code class="language-cpp">void in(int l,int r,int hao)//左范围，右范围，编号 
{
	if(l==r)
	{
		fak[hao]=zhi[l];
		return ;
	}
	
	in(l,(l+r)/2,hao*2);
	in((l+r)/2+1,r,hao*2+1);
	
	fak[hao]=max(fak[hao*2],fak[hao*2+1]); 
	return ;
}
</code></pre>
<p>我们通过</p>
<pre><code class="language-cpp">in(1,n,1);
</code></pre>
<p>就可以让它建树啦！但是呢，我们还需要让它存下对应节点所维护的区间。所以，我们需要加上一些代码。</p>
<pre><code class="language-cpp">void in(int l,int r,int hao)//左，右，编号 
{
	if(l==r)
	{
		qu_l[hao]=l;
		qu_r[hao]=r;//忘记记录害死猫 
		fak[hao]=zhi[l];
		return ;
	}
	
	in(l,(l+r)/2,hao*2);
	in((l+r)/2+1,r,hao*2+1);
	
	fak[hao]=max(fak[hao*2],fak[hao*2+1]); 
	
	qu_l[hao]=l;
	qu_r[hao]=r;//记录其维护的区间 
	return ;
}

</code></pre>
<h3 id="3-单点修改">3. 单点修改</h3>
<p>如果我们要修改某些点的话，假如我们改第二个为5</p>
<figure data-type="image" tabindex="4"><img src="https://s2.ax1x.com/2019/11/12/M1qbNQ.png" alt="M1qbNQ.png" loading="lazy"></figure>
<p>只要包含这个点的，都需要修改。</p>
<pre><code class="language-cpp">void fix(int hao,int h,int zhi)//线段树所在编号  单点修改需要的编号   修改的值 
{
	if(qu_r[hao]==0 || qu_l[hao]==0)
	{
		return ;
	}
	if(qu_l[hao]==h &amp;&amp; qu_r[hao]==h) 
	{
		fak[hao]=zhi;
		return ;
	}
	if(qu_l[hao]&lt;=h &amp;&amp; h&lt;=qu_r[hao])
	{
		fix(hao*2,h,zhi);
		fix(hao*2+1,h,zhi);
		fak[hao]=max(fak[hao],zhi); 
		return ;
	}
	else
	{
		return ;
	}
} 
</code></pre>
<p>我们只需要</p>
<pre><code>fix(1,[改变的位置],[改变的值]);
</code></pre>
<p>就完事了。</p>
<h3 id="4-区间查询">4. 区间查询</h3>
<p>说了这么多，这个树依然没有体现出它巨大的作用。</p>
<p>那么，我们来输出区间最大值吧。我们继续用老图。</p>
<figure data-type="image" tabindex="5"><img src="https://s2.ax1x.com/2019/11/12/M3uMOx.png" alt="M3uMOx.png" loading="lazy"></figure>
<p>如果全包含，那么我们就<strong>分三种情况</strong>（我在这里被坑死了）</p>
<p>如果这个区间被左区间全包含，则走左边。</p>
<p>如果这个区间被右区间全包含，则走右边。</p>
<p>如果这个区间被两个区间都包含一些，那么切成两段求max。</p>
<pre><code class="language-cpp">int find(int l,int r,int hao)
{
	if(l&gt;r)
	{
		return 0;
	}
	if(qu_l[hao]&lt;=l &amp;&amp; r&lt;=qu_r[hao])
	{
		if(qu_l[hao]==l &amp;&amp; r==qu_r[hao])
		{
			return fak[hao];
		}
		else
		{
			if(qu_l[hao]==qu_r[hao])
			{
				return fak[hao];
			}
			else
			{
				if(qu_l[hao*2]&lt;=l &amp;&amp; r&lt;=qu_r[hao*2])
				{
					return find(l,r,hao*2);
				}
				if(qu_l[hao*2+1]&lt;=l &amp;&amp; r&lt;=qu_r[hao*2+1])
				{
					return find(l,r,hao*2+1);
				}
				
				return max(find(l,qu_r[hao*2],hao*2),find(qu_l[hao*2+1],r,hao*2+1));
			}
		}
	}
	else
	{
		return 0;
	}
} 
</code></pre>
<p>如果我们要求o到oo的最大值，那么</p>
<pre><code class="language-cpp">find(o,oo,1)
</code></pre>
<p>就是它的值。</p>
<h3 id="5-完成代码">5. 完成代码</h3>
<p><strong>输入格式：</strong></p>
<p>先输入一个n，然后以后n个数输入原数组的值。</p>
<p>然后输入o，然后o行输入两个数oo，ooo，表示把oo位的数修改为ooo。</p>
<p>然后输入p，然后p行输入两个数pp，ppp，表示需要输出pp到ppp的最大值。</p>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
int zhi[10001];//原数组 

int fak[10001];//线段树数组 
int fa[10001];//父亲节点 未使用 // 
int left[10001];//左儿子编号 未使用 // 
int qu_l[10001];//维护的区间 左范围   
int right[10001]; //右儿子编号  未使用 // 
int qu_r[10001];//维护的区间 右范围 

int max(int o,int p)
{
	if(o&gt;=p)
	{
		return o;
	}
	else
	{
		return p;
	}
}


void in(int l,int r,int hao)//左，右，编号 
{
	if(l==r)
	{
		qu_l[hao]=l;
		qu_r[hao]=r;//忘记记录害死猫 
		fak[hao]=zhi[l];
		return ;
	}
	
	in(l,(l+r)/2,hao*2);
	in((l+r)/2+1,r,hao*2+1);
	
	fak[hao]=max(fak[hao*2],fak[hao*2+1]); 
	
	qu_l[hao]=l;
	qu_r[hao]=r;//记录其维护的区间 
	return ;
}

void fix(int hao,int h,int zhi)//线段树所在编号  单点修改需要的编号   修改的值 
{
	if(qu_r[hao]==0 || qu_l[hao]==0)
	{
		return ;
	}
	if(qu_l[hao]==h &amp;&amp; qu_r[hao]==h) 
	{
		fak[hao]=zhi;
		return ;
	}
	if(qu_l[hao]&lt;=h &amp;&amp; h&lt;=qu_r[hao])
	{
		fix(hao*2,h,zhi);
		fix(hao*2+1,h,zhi);
		fak[hao]=max(fak[hao],zhi); 
		return ;
	}
	else
	{
		return ;
	}
} 
int find(int l,int r,int hao)
{
	if(l&gt;r)
	{
		return 0;
	}
	if(qu_l[hao]&lt;=l &amp;&amp; r&lt;=qu_r[hao])
	{
		if(qu_l[hao]==l &amp;&amp; r==qu_r[hao])
		{
			return fak[hao];
		}
		else
		{
			if(qu_l[hao]==qu_r[hao])
			{
				return fak[hao];
			}
			else
			{
				if(qu_l[hao*2]&lt;=l &amp;&amp; r&lt;=qu_r[hao*2])
				{
					return find(l,r,hao*2);
				}
				if(qu_l[hao*2+1]&lt;=l &amp;&amp; r&lt;=qu_r[hao*2+1])
				{
					return find(l,r,hao*2+1);
				}
				
				return max(find(l,qu_r[hao*2],hao*2),find(qu_l[hao*2+1],r,hao*2+1));
			}
		}
	}
	else
	{
		return 0;
	}
} 
int main()
{
	int n;
	scanf(&quot;%d&quot;,&amp;n);
	for(int i=1;i&lt;=n;i++)
	{
		scanf(&quot;%d&quot;,&amp;zhi[i]);
	}
	
	in(1,n,1); 
	
	int ooo;
	scanf(&quot;%d&quot;,&amp;ooo);
	for(int i=1;i&lt;=ooo;i++)
	{
		int o,oo;
		scanf(&quot;%d %d&quot;,&amp;o,&amp;oo);
		fix(1,o,oo);
	} 
	
	scanf(&quot;%d&quot;,&amp;ooo);
	for(int i=1;i&lt;=ooo;i++)
	{
		int o,oo;
		scanf(&quot;%d %d&quot;,&amp;o,&amp;oo);
		printf(&quot;%d\n&quot;,find(o,oo,1));
	} 
	
	return 0;
} 
</code></pre>
<h3 id="6-其他问题">6. 其他问题</h3>
<p>如果想要区间修改等事项，请学习可持久化线段树。</p>
]]></content>
    </entry>
</feed>